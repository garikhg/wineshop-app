import {    ApolloClient,    InMemoryCache,    createHttpLink,    ApolloLink,} from '@apollo/client';const SEVEN_DAYS = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds/** * Middleware operation * If we have a session token in localStorage, add it to the GraphQL request as a Session header. */const middleware = new ApolloLink( ( operation, forward ) => {    const sessionData = typeof window !== 'undefined'        ? JSON.parse( localStorage.getItem( 'woo-session' ) )        : null;    if ( sessionData && sessionData.token && sessionData.createdTime ) {        const { token, createdTime } = sessionData;        if ( Date.now() - createdTime > SEVEN_DAYS ) {            localStorage.removeItem( 'woo-session' );            localStorage.setItem( 'woocommerce-cart', JSON.stringify( {} ) );        } else {            operation.setContext( () => ( {                headers: {                    'woocommerce-session': `Session ${ token }`,                },            } ) );        }    }    return forward( operation );} );/** * Afterward operation. * This catches the incoming session token and stores it in localStorage, for future GraphQL requests. */const afterware = new ApolloLink( ( operation, forward ) =>    forward( operation ).map( ( response ) => {        const { headers } = operation.getContext().response;        const session = headers.get( 'woocommerce-session' );        if ( session && typeof window !== 'undefined' ) {            if ( session === 'false' ) {                localStorage.removeItem( 'woo-session' );            } else if ( ! localStorage.getItem( 'woo-session' ) ) {                localStorage.setItem(                    'woo-session',                    JSON.stringify( { token: session, createdTime: Date.now() } ),                );            }        }        return response;    } ),);const httpLink = createHttpLink( {    uri: process.env.NEXT_PUBLIC_WORDPRESS_URL,    fetch,} );const client = new ApolloClient( {    ssrMode: typeof window === 'undefined',    link: ApolloLink.from( [ middleware, afterware, httpLink ] ),    cache: new InMemoryCache(),} );export default client;